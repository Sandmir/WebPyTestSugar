# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.6.1-browsers
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirments.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
             wget https://bintray.com/qameta/generic/download_file?file_path=io%2Fqameta%2Fallure%2Fallure%2F2.6.0%2Fallure-2.6.0.tgz
             mkdir allure2		 
             tar -xvzf allure-2.6.0.tgz -d allure-commandline		
             export PATH=/allure-commandline/allure-2.6.0/bin/allure:$PATH
             echo $PATH
             echo allure --version
             echo "==========================="
             python3 -m venv venv
             . venv/bin/activate
             ls -al
             pip install -r requirments.txt
             mkdir allure-results
             mkdir allure-results/h

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirments.txt" }}
        
      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          name: run tests login
          command: |
            . venv/bin/activate
            py.test test/test_login.py -s --alluredir allure-results
            ls
            echo "++++++++ test report +++++++"
            ls 
            allure generate -o allure-results/h --clean 


      - store_artifacts:
          path: allure-results
          destination: allure-results
